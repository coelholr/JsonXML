/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.jsonxml.editor;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.json.JSONML;
import org.json.XML;
import org.jsonxml.library.ScadabrJson;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.jsonxml.editor//Editor//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "EditorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.jsonxml.editor.EditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_EditorAction",
        preferredID = "EditorTopComponent")
@Messages({
    "CTL_EditorAction=Editor",
    "CTL_EditorTopComponent=Editor Window",
    "HINT_EditorTopComponent=This is a Editor window"
})
public final class EditorTopComponent extends TopComponent {

    public EditorTopComponent() {
        initComponents();
        setName(Bundle.CTL_EditorTopComponent());
        setToolTipText(Bundle.HINT_EditorTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TestButton = new javax.swing.JButton();
        OpenButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        xmlFileArea = new javax.swing.JTextArea();
        ConvertButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jsonFileArea = new javax.swing.JTextArea();
        toXML = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(TestButton, org.openide.util.NbBundle.getMessage(EditorTopComponent.class, "EditorTopComponent.TestButton.text")); // NOI18N
        TestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(OpenButton, org.openide.util.NbBundle.getMessage(EditorTopComponent.class, "EditorTopComponent.OpenButton.text")); // NOI18N
        OpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenButtonActionPerformed(evt);
            }
        });

        xmlFileArea.setEditable(false);
        xmlFileArea.setColumns(20);
        xmlFileArea.setRows(5);
        jScrollPane1.setViewportView(xmlFileArea);

        org.openide.awt.Mnemonics.setLocalizedText(ConvertButton, org.openide.util.NbBundle.getMessage(EditorTopComponent.class, "EditorTopComponent.ConvertButton.text")); // NOI18N
        ConvertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConvertButtonActionPerformed(evt);
            }
        });

        jsonFileArea.setColumns(20);
        jsonFileArea.setRows(5);
        jScrollPane3.setViewportView(jsonFileArea);

        org.openide.awt.Mnemonics.setLocalizedText(toXML, org.openide.util.NbBundle.getMessage(EditorTopComponent.class, "EditorTopComponent.toXML.text")); // NOI18N
        toXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toXMLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(OpenButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ConvertButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TestButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toXML)
                        .addGap(0, 76, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OpenButton)
                    .addComponent(ConvertButton)
                    .addComponent(TestButton)
                    .addComponent(toXML))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void OpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenButtonActionPerformed
        try {
            BufferedReader br;
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    "XML Files", "xml");
            chooser.setFileFilter(filter);
            int returnVal = chooser.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                br = new BufferedReader(new FileReader(new File(chooser.getSelectedFile().toString())));
                String line;
                xmlFileArea.setText("");
                lineXML.setLength(0);
                try {
                    while ((line = br.readLine()) != null) {
                        xmlFileArea.append(line + "\n");
                        lineXML.append(line.trim());
                    }
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        } catch (FileNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_OpenButtonActionPerformed

    private void ConvertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConvertButtonActionPerformed
        JFileChooser saveJsonChooser = new JFileChooser();
        JFileChooser openFilterChooser = new JFileChooser();

        FileNameExtensionFilter filterJsonFiles = new FileNameExtensionFilter(
                "JSON Files", "json");
        saveJsonChooser.setFileFilter(filterJsonFiles);
        saveJsonChooser.setDialogTitle("Salvar JSON");
        int returnValSaveJson = saveJsonChooser.showSaveDialog(null);

        FileNameExtensionFilter filterOpenReplaceFiles = new FileNameExtensionFilter(
                "Text Files", "txt");
        openFilterChooser.setFileFilter(filterOpenReplaceFiles);
        openFilterChooser.setDialogTitle("Padrão de Substituição");
        int returnValOpenFilter = openFilterChooser.showOpenDialog(null);

        if (returnValSaveJson == JFileChooser.APPROVE_OPTION & returnValOpenFilter == JFileChooser.APPROVE_OPTION) {
            PrintWriter out;
            BufferedReader brFilterFile;
            String jsonFileName = saveJsonChooser.getSelectedFile().toString();
            String jsonConvertFileName;

            if (!(jsonFileName.endsWith(".json"))) {
                jsonFileName = jsonFileName + ".json";
            }

            jsonConvertFileName = jsonFileName.replace(".json", " uncoverted.json");


            try {
                brFilterFile = new BufferedReader(new FileReader(new File(openFilterChooser.getSelectedFile().toString())));
                String convertToScadabrJson = ScadabrJson.ConvertToScadabrJson(XML.toJSONObject(lineXML.toString()), brFilterFile);

                out = new PrintWriter(jsonFileName);
                out.println(convertToScadabrJson);
                out.close();

                out = new PrintWriter(jsonConvertFileName);
                out.println(XML.toJSONObject(lineXML.toString()).toString(3));

                jsonFileArea.setText(convertToScadabrJson);

                out.close();
            } catch (FileNotFoundException ex) {
                Exceptions.printStackTrace(ex);
            }
        }

    }//GEN-LAST:event_ConvertButtonActionPerformed

    private void TestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestButtonActionPerformed
        jsonFileArea.setText("");
        Iterator itr = XML.toJSONObject(lineXML.toString()).getJSONObject("ScadaBRDataPoints").keys();
        while (itr.hasNext()) {
            Object element = itr.next();
            jsonFileArea.append(element.toString());
        }
        /*        jsonFileArea.setText(XML.toJSONObject(lineXML.toString()).getJSONObject("ScadaBRDataPoints").keys().toString());
         */

    }//GEN-LAST:event_TestButtonActionPerformed

    private void toXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toXMLActionPerformed
        JFileChooser saveXMLChooser = new JFileChooser();

        FileNameExtensionFilter filterXMLFiles = new FileNameExtensionFilter(
                "XML Files", "xml");
        saveXMLChooser.setFileFilter(filterXMLFiles);
        saveXMLChooser.setDialogTitle("Salvar XML");
        int returnValSaveXML = saveXMLChooser.showSaveDialog(null);

        if (returnValSaveXML == JFileChooser.APPROVE_OPTION) {
            PrintWriter out;
            String XMLFileName = saveXMLChooser.getSelectedFile().toString();

            if (!(XMLFileName.endsWith(".xml"))) {
                XMLFileName = XMLFileName + ".xml";
            }



            try {
                String convertToXML = ScadabrJson.ConvertToScadabrJson(JSONML.toString(null);

                out = new PrintWriter(XMLFileName);
                out.println(convertToXML);
                out.close();

                jsonFileArea.setText(convertToScadabrJson);

                out.close();
            } catch (FileNotFoundException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_toXMLActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConvertButton;
    private javax.swing.JButton OpenButton;
    private javax.swing.JButton TestButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jsonFileArea;
    private javax.swing.JButton toXML;
    private javax.swing.JTextArea xmlFileArea;
    // End of variables declaration//GEN-END:variables
    private StringBuilder lineXML = new StringBuilder();

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
