/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.jsonxml.editor;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.json.JSONObject;
import org.json.XML;
import org.jsonxml.library.ScadabrJson;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.jsonxml.editor//Editor//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "EditorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.jsonxml.editor.EditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_EditorAction",
        preferredID = "EditorTopComponent")
@Messages({
    "CTL_EditorAction=Editor",
    "CTL_EditorTopComponent=Editor Window",
    "HINT_EditorTopComponent=This is a Editor window"
})
public final class EditorTopComponent extends TopComponent {

    public EditorTopComponent() {
        initComponents();
        setName(Bundle.CTL_EditorTopComponent());
        setToolTipText(Bundle.HINT_EditorTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openReplacePatternButton = new javax.swing.JButton();
        openXMLButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        xmlFileArea = new javax.swing.JTextArea();
        convertToJsonButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jsonFileArea = new javax.swing.JTextArea();
        convertToXMLButton = new javax.swing.JButton();
        openJsonButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(openReplacePatternButton, org.openide.util.NbBundle.getMessage(EditorTopComponent.class, "EditorTopComponent.openReplacePatternButton.text")); // NOI18N
        openReplacePatternButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openReplacePatternButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(openXMLButton, org.openide.util.NbBundle.getMessage(EditorTopComponent.class, "EditorTopComponent.openXMLButton.text")); // NOI18N
        openXMLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openXMLButtonActionPerformed(evt);
            }
        });

        xmlFileArea.setEditable(false);
        xmlFileArea.setColumns(20);
        xmlFileArea.setRows(5);
        jScrollPane1.setViewportView(xmlFileArea);

        org.openide.awt.Mnemonics.setLocalizedText(convertToJsonButton, org.openide.util.NbBundle.getMessage(EditorTopComponent.class, "EditorTopComponent.convertToJsonButton.text")); // NOI18N
        convertToJsonButton.setEnabled(false);
        convertToJsonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertToJsonButtonActionPerformed(evt);
            }
        });

        jsonFileArea.setEditable(false);
        jsonFileArea.setColumns(20);
        jsonFileArea.setRows(5);
        jScrollPane3.setViewportView(jsonFileArea);

        org.openide.awt.Mnemonics.setLocalizedText(convertToXMLButton, org.openide.util.NbBundle.getMessage(EditorTopComponent.class, "EditorTopComponent.convertToXMLButton.text")); // NOI18N
        convertToXMLButton.setEnabled(false);
        convertToXMLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertToXMLButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(openJsonButton, org.openide.util.NbBundle.getMessage(EditorTopComponent.class, "EditorTopComponent.openJsonButton.text")); // NOI18N
        openJsonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openJsonButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(openXMLButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(convertToJsonButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openReplacePatternButton)
                        .addGap(0, 27, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(openJsonButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(convertToXMLButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(convertToJsonButton)
                    .addComponent(openReplacePatternButton)
                    .addComponent(openXMLButton)
                    .addComponent(convertToXMLButton)
                    .addComponent(openJsonButton))
                .addGap(10, 10, 10))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void openXMLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openXMLButtonActionPerformed
        try {
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    "XML Files", "xml");
            chooser.setFileFilter(filter);
            int returnVal = chooser.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                brXMLFile = new BufferedReader(new FileReader(new File(chooser.getSelectedFile().toString())));
                if (brFilterFile != null) {
                    convertToJsonButton.setEnabled(true);
                } // enable convertion to Json

                String line;
                xmlFileArea.setText("");
                lineXML.setLength(0);
                try {
                    while ((line = brXMLFile.readLine()) != null) {
                        xmlFileArea.append(line + "\n");
                        lineXML.append(line.trim());
                    }
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        } catch (FileNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_openXMLButtonActionPerformed

    private void convertToJsonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertToJsonButtonActionPerformed
        JFileChooser saveJsonChooser = new JFileChooser();
//        JFileChooser openFilterChooser = new JFileChooser();

        FileNameExtensionFilter filterJsonFiles = new FileNameExtensionFilter(
                "JSON Files", "json");
        saveJsonChooser.setFileFilter(filterJsonFiles);
        saveJsonChooser.setDialogTitle("Salvar JSON");
        int returnValSaveJson = saveJsonChooser.showSaveDialog(this);

        /*        FileNameExtensionFilter filterOpenReplaceFiles = new FileNameExtensionFilter(
         "Text Files", "txt");
         openFilterChooser.setFileFilter(filterOpenReplaceFiles);
         openFilterChooser.setDialogTitle("Padrão de Substituição");
         int returnValOpenFilter = openFilterChooser.showOpenDialog(null);
         */
        if (returnValSaveJson == JFileChooser.APPROVE_OPTION) {
            PrintWriter out;
            String jsonFileName = saveJsonChooser.getSelectedFile().toString();
            String jsonConvertFileName;

            if (!(jsonFileName.endsWith(".json"))) {
                jsonFileName = jsonFileName + ".json";
            }

            jsonConvertFileName = jsonFileName.replace(".json", " uncoverted.json");

            try {
                if (brFilterFile == null) {
                    openReplacePatternButtonActionPerformed(evt);
                }
                String convertToScadabrJson = ScadabrJson.ConvertToScadabrJson(XML.toJSONObject(lineXML.toString()), brFilterFile);

                out = new PrintWriter(jsonFileName);
                out.println(convertToScadabrJson);
                out.close();

                out = new PrintWriter(jsonConvertFileName);
                out.println(XML.toJSONObject(lineXML.toString()).toString(3));

                jsonFileArea.setText((new JSONObject(convertToScadabrJson)).toString(3));

                out.close();
            } catch (FileNotFoundException ex) {
                Exceptions.printStackTrace(ex);
            }
        }

    }//GEN-LAST:event_convertToJsonButtonActionPerformed

    private void openReplacePatternButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openReplacePatternButtonActionPerformed
        JFileChooser openFilterChooser = new JFileChooser();

        FileNameExtensionFilter filterOpenReplaceFiles = new FileNameExtensionFilter(
                "Text Files", "txt");
        openFilterChooser.setFileFilter(filterOpenReplaceFiles);
        openFilterChooser.setDialogTitle("Padrão de Substituição");
        int returnValOpenFilter = openFilterChooser.showOpenDialog(this);

        if (returnValOpenFilter == JFileChooser.APPROVE_OPTION) {

            try {
                brFilterFile = new BufferedReader(new FileReader(new File(openFilterChooser.getSelectedFile().toString())));
                if (brXMLFile != null) {
                    convertToJsonButton.setEnabled(true);
                }

            } catch (FileNotFoundException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
        /*        jsonFileArea.setText(XML.toJSONObject(lineXML.toString()).getJSONObject("ScadaBRDataPoints").keys().toString());
         */

    }//GEN-LAST:event_openReplacePatternButtonActionPerformed

    private void convertToXMLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertToXMLButtonActionPerformed
        JFileChooser saveXMLChooser = new JFileChooser();

        FileNameExtensionFilter filterXMLFiles = new FileNameExtensionFilter(
                "XML Files", "xml");
        saveXMLChooser.setFileFilter(filterXMLFiles);
        saveXMLChooser.setDialogTitle("Salvar XML");
        int returnValSaveXML = saveXMLChooser.showSaveDialog(this);

        if (returnValSaveXML == JFileChooser.APPROVE_OPTION) {
            PrintWriter out;
            String XMLFileName = saveXMLChooser.getSelectedFile().toString();

            if (!(XMLFileName.endsWith(".xml"))) {
                XMLFileName = XMLFileName + ".xml";
            }
/*            System.out.println(lineJson);
            System.out.println((new JSONObject(lineJson.toString())).toString(3));
            System.out.println(XML.toString(new JSONObject(lineJson.toString())));
*/
            try {
                lineXML = new StringBuilder();
                lineXML.append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" + "\n");
                lineXML.append("<ScadaBRDataPointsMeta xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">" + "\n");
                lineXML.append(XML.toString(new JSONObject(lineJson.toString())));
                lineXML.append("</ScadaBRDataPointsMeta>");

                
                xmlFileArea.setText(lineXML.toString());

                out = new PrintWriter(XMLFileName);
                out.println(lineXML.toString());
                out.close();

                out.close();
            } catch (FileNotFoundException ex) {
                Exceptions.printStackTrace(ex);
            }

        }
    }//GEN-LAST:event_convertToXMLButtonActionPerformed

    private void openJsonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openJsonButtonActionPerformed
        try {
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    "Json Files", "json");
            chooser.setFileFilter(filter);
            int returnVal = chooser.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                brJsonFile = new BufferedReader(new FileReader(new File(chooser.getSelectedFile().toString())));
                convertToXMLButton.setEnabled(true); // enable convertion to XML

                String line;
                jsonFileArea.setText("");
                lineJson.setLength(0);
                try {
                    while ((line = brJsonFile.readLine()) != null) {
                        lineJson.append(line.trim());
                    }
                    jsonFileArea.setText((new JSONObject(lineJson.toString())).toString(3));
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        } catch (FileNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_openJsonButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton convertToJsonButton;
    private javax.swing.JButton convertToXMLButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jsonFileArea;
    private javax.swing.JButton openJsonButton;
    private javax.swing.JButton openReplacePatternButton;
    private javax.swing.JButton openXMLButton;
    private javax.swing.JTextArea xmlFileArea;
    // End of variables declaration//GEN-END:variables
    private StringBuilder lineXML = new StringBuilder();
    private StringBuilder lineJson = new StringBuilder();
    private BufferedReader brFilterFile;
    private BufferedReader brXMLFile;
    private BufferedReader brJsonFile;

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
